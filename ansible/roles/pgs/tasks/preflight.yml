---

- name: Fail when Distro is not supported
  ansible.builtin.fail:
    msg: "Distribution not supported !!!"
  when: ansible_facts['lsb']['id'] not in ['EndeavourOS','Debian','Nobara']

- name: Fail when Virtualization mode is wrong
  ansible.builtin.fail:
    msg: "Virtualization mode not supported, please set pgs_virt_mode on passthrough or gvtg or sriov !!!"
  when: pgs_virt_mode not in ['passthrough','gvtg','sriov']

- name: Fail when driver not Nvidia, Intel or AMD
  ansible.builtin.fail:
    msg: "Driver not supported, it musts be intel (the default even for gvtg or sriov virtualization mode), amd or nvidia !!!"
  when: pgs_windows_gpu_driver not in ['intel','nvidia','amd']

- name: Fail when VM memory exceeds 3/4 of total memory available on Host
  ansible.builtin.fail:
    msg: "VM memry (RAM) too high, host also needs memory !!!"
  when: pgs_config_vm_memory > ( ansible_memtotal_mb * 3 / 4 )

- name: Check 2nd mouse exists
  ansible.builtin.stat:
    path: '{{ pgs_config_usb_mouse }}'
  register: _second_mouse
  become: true

- name: Fail when path to second mouse doesnt exist
  ansible.builtin.fail:
    msg: "Path to second mouse doesn't exist !!!"
  when: pgs_config_usb_mouse != '' and not _second_mouse.stat.exists

- name: Check 2nd keyboard exists
  ansible.builtin.stat:
    path: '{{ pgs_config_usb_kbd }}'
  register: _second_kbd
  become: true

- name: Fail when path to second keyboard doesnt exist
  ansible.builtin.fail:
    msg: "Path to second keyboard doesn't exist !!!"
  when: pgs_config_usb_kbd != '' and not _second_kbd.stat.exists

- name: Verify if disk is correct
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      lsblk -no TYPE {{ pgs_windows_disk_device_path }} | head -n1
  register: _is_disk
  changed_when: false
  when: pgs_windows_disk_device_path != ''

- name: Fail when physical disk path is not good
  ansible.builtin.fail:
    msg: "Path to disk for copying img isn't a disk !!!"
  when: pgs_windows_disk_device_path != '' and _is_disk.stdout != 'disk'

- name: Check if system uses systemd-boot
  ansible.builtin.stat:
    path: '{{ pgs_distro_boot_location }}/loader'
  register: _systemd_boot
  become: true

- name: Check if system uses GRUB
  ansible.builtin.stat:
    path: /etc/default/grub
  register: _grub_boot

- name: Configure IOMMU and vfio for systemd-boot
  when: _systemd_boot.stat.exists
  notify:
    - Reinstall Kernels
    - Reboot
    - Pause
  block:
    - name: Read /etc/kernel/cmdline
      ansible.builtin.slurp:
        src: /etc/kernel/cmdline
      register: _krnl_file
    - name: Append IOMMU if not present
      ansible.builtin.copy:
        dest: /etc/kernel/cmdline
        content: >-
          {{
            (_krnl_file.content | b64decode)
            if __iommu_param in (_krnl_file.content | b64decode)
            else (_krnl_file.content | b64decode + ' ' + __iommu_param + ' iommu=pt')
          }}
        mode: "0644"
      become: true

- name: Configure IOMMU for grub2
  when: _grub_boot.stat.exists
  become: true
  notify:
    - Reinstall Kernels
    - Reboot
    - Pause
  block:
    - name: Check if IOMMU param already present in GRUB config
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          grep -q '{{ __iommu_param }}' /etc/default/grub && echo present || echo absent
      register: _grub_check
      changed_when: false
    - name: Add IOMMU param to GRUB_CMDLINE_LINUX_DEFAULT if missing
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="(.*)"'
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 {{ __iommu_param }} iommu=pt"'
        backrefs: true
      when: _grub_check.stdout == "absent"

- name: Preflight for Passthrough Virtualization mode
  when: pgs_virt_mode == 'passthrough'
  notify:
    - Reinstall Kernels
    - Reboot
    - Pause
  block:
    - name: Collect PCI information
      ansible.builtin.command: lspci -mm
      register: lspci_output
      changed_when: false
    - name: Fail if not enough GPU
      ansible.builtin.fail:
        msg: "You need at least 2 GPU !!!"
      when: "lspci_output.stdout_lines | select('search', 'VGA') | list | length < 2"
    - name: Fail if no 2nd Keyboard/Mouse and no LookingGlass
      ansible.builtin.fail:
        msg: "VM wont be usable without 2nd Keyboard/Mouse or LookingGlass not enabled !!!"
      when: "not pgs_install_looking_glass and (pgs_config_usb_kbd == '' or pgs_config_usb_mouse == '')"
    - name: Get all vendor_id and pci_id from the selected dGPU
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          lspci -nn | gawk '/{{ pgs_passthrough_gpu_pci_base_addr }}/{match($0, /\[([0-9a-fA-F]{4}:[0-9a-fA-F]{4})\]/, m); if (m[1]) print m[1]}' | paste -sd,
      register: _pci_ids
      changed_when: false
    - name: Copy initramfs (dracut) options
      ansible.builtin.template:
        src: vfio-dracut.conf.j2
        dest: /etc/dracut.conf.d/vfio.conf
        mode: preserve
      become: true
      when:
        - "'build' in ansible_run_tags"
        - ansible_facts['lsb']['id'] == 'EndeavourOS'
    - name: Copy modprobe.d options for vfio
      ansible.builtin.template:
        src: vfio-modprobe.conf.j2
        dest: /etc/modprobe.d/vfio.conf
        mode: preserve
      become: true
      when: "'build' in ansible_run_tags"

- name: Preflight for GVT-g Virtualization mode
  when: pgs_virt_mode == 'gvtg'
  notify:
    - Reinstall Kernels
    - Reboot
    - Pause
  block:
    - name: Fail when CPU doesn't support GVT-g
      ansible.builtin.fail:
        msg: "GVT-g virtualization mode is not supported on this CPU !!!"
      when: not 'intel' in __iommu_param or (__intel_generation | int) < 6 or (__intel_generation | int) > 10
    - name: Fail when Looking Glass not enabled
      ansible.builtin.fail:
        msg: "Virtualization mode gvtg needs Looking Glass !!!"
      when: not pgs_install_looking_glass
    - name: Collect PCI information
      ansible.builtin.command: lspci -mm
      register: lspci_output
      changed_when: false
    - name: Get PCI address for Intel VGA controller
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          lspci | grep -i Intel | grep VGA | cut -d' ' -f1
      register: _pci_cpu
      changed_when: false
    - name: Get MDEV best type for GVT-g
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          ls -1 /sys/bus/pci/devices/0000:{{ _pci_cpu.stdout }}/mdev_supported_types/ | head -n1
      register: _mdev_type
      changed_when: false
      ignore_errors: true
    - name: Copy modprobe options for i915 module
      ansible.builtin.copy:
        src: i915.gvtg.conf
        dest: /etc/modprobe.d/i915.conf
        mode: "0644"
        owner: root
        group: root
      become: true
    - name: Copy modules to load at boot
      ansible.builtin.copy:
        src: modules.gvtg.conf
        dest: /etc/modules-load.d/gvtg.conf
        mode: "0644"
        owner: root
        group: root
      become: true

- name: Force all notified handlers to run at this point
  ansible.builtin.meta: flush_handlers

- name: Create script for cpu pinning classic version
  ansible.builtin.template:
    src: cpu_pinning_classic.sh.j2
    dest: /tmp/cpu_pinning.sh
    mode: "0755"
  when: "not ('intel' in __iommu_param and (__intel_generation | int) >= 12)"

- name: Create script for cpu Intel new generation CPU
  ansible.builtin.template:
    src: cpu_pinning_intel_newgen.sh.j2
    dest: /tmp/cpu_pinning.sh
    mode: "0755"
  when: "'intel' in __iommu_param and (__intel_generation | int) >= 12"

- name: Get the PCI disk controller address
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      udevadm info --name={{ pgs_windows_disk_device_path }} --query=property --value --property ID_PATH | cut -d'-' -f2
  register: _disk_pci_addr
  changed_when: false
  when: pgs_config_pass_disk_controller
